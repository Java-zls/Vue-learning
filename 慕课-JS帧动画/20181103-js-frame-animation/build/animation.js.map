{"version":3,"sources":["webpack://animation/webpack/universalModuleDefinition","webpack://animation/webpack/bootstrap","webpack://animation/./src/animation.js","webpack://animation/./src/imageLoader.js","webpack://animation/./src/timeline.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;;AAEb,gBAAgB,mBAAO,CAAC,2CAAe;AACvC,eAAe,mBAAO,CAAC,qCAAY;;;AAGnC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;;AAE5C;AACA,KAAK;;AAEL;;;AAGA;AACA;AACA;;AAEA,iC;;;;;;;;;;;;ACvWa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,oBAAoB;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA,mEAAmE;AACnE;;;;AAIA,mB;;;;;;;;;;;;ACjIa;;;AAGb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"animation.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/animation.js\");\n","\"use strict\";\r\n\r\nvar loadImage = require(\"./imageLoader\");\r\nvar Timeline = require(\"./timeline\");\r\n\r\n\r\n// 初始化状态 initial (使用类似与常量的写法写变量(js不分常量和变量)，常量的写法一般用大写)\r\nlet STATE_INITIAL = 0;\r\n// 开始状态\r\nlet STATE_START = 1;\r\n// 停止状态\r\nlet STATE_STOP = 2;\r\n\r\n\r\n// 同步任务\r\nvar TASK_SYNC = 0;\r\n// 异步任务\r\nvar TASK_ASYNC = 1;\r\n\r\n\r\n/**\r\n * 简单的函数封装，执行 callback\r\n * @param callback 执行函数\r\n */\r\nfunction next(callback) {\r\n    callback && callback();\r\n}\r\n\r\n\r\n/**\r\n * 帧动画类\r\n * @constructor\r\n */\r\nfunction Animation() {\r\n    // 帧动画库的任务链，定义为一个数组\r\n    this.taskQueue = [];\r\n    // 初始化索引\r\n    this.index = 0;\r\n    // 引用时间轴函数\r\n    this.timeline = new Timeline();\r\n    // 初始化状态\r\n    this.state = STATE_INITIAL;\r\n}\r\n\r\nAnimation.prototype = {\r\n    constructor: Animation,\r\n\r\n    /**\r\n     * 添加一个同步任务，预加载图片\r\n     * @param imgList 图片数组\r\n     */\r\n    loadImage: function (imgList) {\r\n        var taskFn = function (next) {\r\n            // 调用 slice() 方法是得到当前数组的一个副本\r\n            // 图片预加载完成过后 next 回调函数执行\r\n            loadImage(imgList.slice(), next);\r\n        };\r\n        var type = TASK_SYNC;\r\n        return this._add(taskFn, type);\r\n    },\r\n\r\n    /**\r\n     * 添加一个异步定时任务，通过定时改变图片背景位置，实现帧动画\r\n     * @param   ele       dom对象\r\n     * @param   positions 背景位置数组\r\n     * @param   imageUrl  图片地址\r\n     */\r\n    changePosition: function (ele, positions, imageUrl) {\r\n        var len = positions.length;\r\n        var taskFn, type;\r\n        if (len) {\r\n            var me = this;\r\n            // 如果 position 是一个数组，那就是个异步的定时任务，此时 taskFn 就是一个函数\r\n            taskFn = function(next, time) {\r\n                if (imageUrl) {\r\n                    ele.style.backgroundImage = \"url(\" + imageUrl + \")\";\r\n                }\r\n                /**\r\n                 * 按位或操作符由一个竖线符号 (|) 表示 :\r\n                 *   先将数值转换为 32 位二进制\"整数值\"(如果有小数则忽略)，再对二进制上每一位进行或运算，得出结果。\r\n                 *   按位或操作只要有一个位是 1 就返回 1，只有在两个位都是 0 的情况下才返回 0。\r\n                 * xxx|0, 因为 0 的二进制就是 32 个 0, 无论任何书对 0 进行或运算都是原来的书，因此可以用它来\r\n                 * 进行向下取整。\r\n                 */\r\n                console.log(\"time/me.interval | 0: \", time/me.interval | 0);\r\n                // 获得当前背景图片位置索引\r\n                var index = Math.min(time/me.interval | 0, len-1);\r\n                var position = positions[index].split(\" \");\r\n                // 改变 dom 对象的背景图片位置\r\n                ele.style.backgroundPosition = position[0] + \"px \" + position[1] + \"px\";\r\n                // 如果当前动画已经执行完毕\r\n                if (index === len -1) {\r\n                    // 调用下一个\r\n                    next();\r\n                }\r\n                type = TASK_ASYNC;\r\n            }\r\n        } else {\r\n            taskFn = next;\r\n            type = TASK_SYNC;\r\n        }\r\n\r\n        return this._add(taskFn, type);\r\n    },\r\n\r\n    /**\r\n     * 添加异步定时任务，通过定时改变 image 标签的 src 属性，实现帧动画\r\n     * @param   ele     image 标签\r\n     * @param   imgList 图片数组\r\n     */\r\n    changeSrc: function (ele, imgList) {\r\n        var len = imgList.length;\r\n        var taskFn, type;\r\n        if (len) {\r\n            var me = this;\r\n            taskFn = function (next, time) {\r\n                // 获取当前图片索引\r\n                var index = Math.min(time/me.interval | 0, len -1);\r\n                // 改变 image 对象的图片地址\r\n                ele.src = imgList[index];\r\n                if (index === len-1) {\r\n                    next();\r\n                }\r\n            };\r\n            type = TASK_ASYNC;\r\n        } else {\r\n            taskFn = next;\r\n            type= TASK_SYNC;\r\n        }\r\n\r\n        return this.add(taskFn, type);\r\n    },\r\n\r\n    /**\r\n     * 高级用法，添加一个异步定时执行的任务，该任务自定义动画每帧执行的任务函数\r\n     * @param taskFn  自定义每帧执行的任务函数\r\n     */\r\n    enterFrame: function (taskFn) {\r\n        return this._add(taskFn, TASK_ASYNC);\r\n    },\r\n\r\n    /**\r\n     * 添加一个同步任务，可以在上一个任务完成后执行回调函数\r\n     * @param   callback   回调函数\r\n     */\r\n    then: function (callback) {\r\n        var taskFn = function(next) {\r\n            callback(this);\r\n            next();\r\n        };\r\n        var type = TASK_SYNC;\r\n        return  this._add(taskFn, type);\r\n    },\r\n\r\n    /**\r\n     * 开始执行任务，异步定义任务执行的间隔\r\n     * @param   interval\r\n     */\r\n    start: function (interval) {\r\n        // 如果任务已经开始，则返回\r\n        if (this.state === STATE_START) {\r\n            return this;\r\n        }\r\n        // 如果任务链中没有任务，则返回\r\n        if (!this.taskQueue.length) {\r\n            return this;\r\n        }\r\n        this.state = STATE_START;\r\n        this.interval = interval;\r\n        this._runTask();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 添加一个同步任务，该任务就是回退到上一个任务中，\r\n     * 实现重复上一个任务的效果，可以定义重复的次数\r\n     * @param   times  重复次数\r\n     */\r\n    repeat: function (times) {\r\n        var me = this;\r\n        var taskFn = function() {\r\n            if (typeof times === \"undefined\") {\r\n                // 无限回退到上一个任务\r\n                me.index--;\r\n                me._runTask();\r\n                return;\r\n            }\r\n            if (times) {\r\n                times--;\r\n                // 回退到上一个任务\r\n                me.index--;\r\n                me._runTask();\r\n            } else {\r\n                // 达到重复次数，跳转到下一个任务\r\n                var task = me.taskQueue[me.index];\r\n                me._next(task);\r\n            }\r\n        };\r\n        var type = TASK_SYNC;\r\n\r\n        return this._add(taskFn, type);\r\n    },\r\n\r\n    /**\r\n     * 添加一个同步任务，相当于 repeat() 更友好的接口，无限循环上一次任务\r\n     */\r\n    repeatForever: function () {\r\n        return this.repeat();\r\n    },\r\n\r\n    /**\r\n     * 设置当前任务执行结束后到下一个任务开始前的等待时间\r\n     * @param   time  等待时长\r\n     */\r\n    wait: function (time) {\r\n        if (this.taskQueue && this.taskQueue.length > 0) {\r\n            // 给当前对象添加一个 wait 属性\r\n            this.taskQueue[this.taskQueue.length - 1].wait = time;\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 暂停当前异步定时任务\r\n     */\r\n    pause: function () {\r\n        if (this.state === STATE_START) {\r\n            this.state = STATE_STOP;\r\n            this.timeline.stop();\r\n            return this;\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 重新执行上一次暂停的异步任务\r\n     */\r\n    restart: function () {\r\n        if (this.state === STATE_STOP) {\r\n            this.state = STATE_START;\r\n            this.timeline.restart();\r\n            return this;\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 释放资源\r\n     */\r\n    dispose: function () {\r\n        if (!this.state !== STATE_INITIAL) {\r\n            this.state = STATE_INITIAL;\r\n            this.taskQueue = null;\r\n            this.timeline.stop();\r\n            this.timeline = null;\r\n            return this;\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 添加一个任务到任务队列\r\n     * @param   taskFn  任务方法\r\n     * @param   type    任务类型\r\n     * @private\r\n     */\r\n    _add: function (taskFn, type) {\r\n        this.taskQueue.push({\r\n            taskFn: taskFn,\r\n            type: type\r\n        });\r\n        return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * 执行任务\r\n     * @private\r\n     */\r\n    _runTask: function () {\r\n        if (!this.taskQueue || this.state !== STATE_START) {\r\n            return;\r\n        }\r\n        // 任务执行完毕\r\n        if (this.index === this.taskQueue.length) {\r\n            this.dispose();\r\n            return;\r\n        }\r\n        // 获得任务链上的当前任务\r\n        var task = this.taskQueue[this.index];\r\n        if (task.type === TASK_SYNC) {\r\n            this._syncTask(task);\r\n        } else {\r\n            this._asyncTask(task);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 同步任务\r\n     * @param    task  执行的任务对象\r\n     * @private\r\n     */\r\n    _syncTask: function (task) {\r\n        var me = this;\r\n        var next = function () {\r\n            // 切换到下一个任务\r\n            me._next();\r\n        };\r\n\r\n        var taskFn = task.taskFn;\r\n        taskFn(next);\r\n    },\r\n\r\n\r\n    /**\r\n     * 异步任务\r\n     * @param    task  执行的任务对象\r\n     * @private\r\n     */\r\n    _asyncTask: function (task) {\r\n        var me = this;\r\n        // 定义每一帧执行的回调函数\r\n        var enterFrame = function (time) {\r\n            var taskFn = task.taskFn;\r\n            var next = function() {\r\n                // 停止当前任务\r\n                me.timeline.stop();\r\n                // 执行下一个任务\r\n                me._next();\r\n            };\r\n            taskFn(next, time);\r\n        };\r\n\r\n        this.timeline.onenterframe = enterFrame;\r\n        this.timeline.start(this.interval);\r\n    },\r\n\r\n\r\n    /**\r\n     * 切换到下一个任务, 支持如果当前任务需要等待，则延时执行\r\n     * @param task 当前任务\r\n     * @private\r\n     */\r\n    _next: function (task) {\r\n        this.index++;\r\n\r\n        var me = this;\r\n        task.wait ? setTimeout(function() {}, task.wait) : this._runTask();\r\n\r\n        this._runTask();\r\n    },\r\n\r\n};\r\n\r\n\r\nfunction createAnimation() {\r\n    return new Animation();\r\n}\r\n\r\nmodule.exports = createAnimation;","\"use strict\";\r\n\r\n/**\r\n *\r\n * @param images    加载图片的数组或对象\r\n * @param callback  图片全部加载完毕后调用的回调函数\r\n * @param timeout   加载超时的时长\r\n */\r\n\r\nfunction loadImage(images, callback, timeout) {\r\n    // count: 加载完成图片的计数器\r\n    // success: 全部图片加载成功的一个标志位\r\n    // timeoutId: 超时 timer 的 id\r\n    // isTimeout: 是否加载超时的标志位\r\n    var count = 0;\r\n    var success = true;\r\n    var timeoutId = 0;\r\n    var isTimeout = false;\r\n\r\n    // 对图片数组 (或对象) 进行遍历\r\n    for (var key in images) {\r\n        // 过滤 prototype 上的属性\r\n        if (!images.hasOwnProperty(key)) {\r\n            // continue 立即退出循环，但退出循环后会从循环的顶部继续执行\r\n            continue;\r\n        }\r\n        // 获得每个图片元素，期望的格式是 object: { src: xxx }\r\n        var item = images[key];\r\n        if (typeof item === \"string\") {\r\n            item = images[key] = {\r\n                src: item\r\n            }\r\n        }\r\n\r\n        // 如果格式不满足期望(item 为空，或者 item.src 不存在)，就丢弃此条数据进行下一个遍历\r\n        if (!item || !item.src) {\r\n            continue;\r\n        }\r\n\r\n        // 如果数据满足期望，计数 +1\r\n        count++;\r\n        // 设置图片元素的 id\r\n        item.id = \"__img__\" + key + getId();\r\n        // 设置图片元素的 img, 他是一个 Image 对象 (把 Image 对象赋值给 window 上自定义属性 item.id )\r\n        item.img = window[item.id] = new Image();\r\n\r\n        // 真正加载图片\r\n        doLoad(item);\r\n    }\r\n\r\n    // 遍历完成(元素为空)如果计数为 0, 则直接调用 callback\r\n    if (!count) {\r\n        callback(success);\r\n    } else if (timeout) {   // 如果 timeout 超时时长存在\r\n        timeoutId = setTimeout(onTimeout, timeout);\r\n    }\r\n\r\n\r\n    /**\r\n     * 真正进行图片加载的函数\r\n     * @param item 图片元素对象\r\n     */\r\n    function doLoad(item) {\r\n        item.status = \"loading\";\r\n        var img = item.img;\r\n        // 定义图片加载成功的回调函数\r\n        img.onload = function() {\r\n            // 只有 success 每次都为 true 时，&true 才为 true\r\n            success = success & true;\r\n            img.status = \"loaded\";\r\n            done();\r\n        };\r\n\r\n        // 定义图片记载失败的回调函数\r\n        img.onerror = function() {\r\n            success = false;\r\n            item.status = \"error\";\r\n            done();\r\n        };\r\n\r\n        // 真正的发起来一个 http(s) 请求\r\n        img.src = item.src;\r\n\r\n        /**\r\n         *  每张图片加载完成的回调函数\r\n         */\r\n        function done() {\r\n            // 首先清理元素上的 onload + onerror 事件\r\n            img.onload = img.onerror = null;\r\n\r\n            // 用 try catch 为了兼容低版本浏览器\r\n            try{\r\n                delete window[item.id];\r\n            } catch(e) {\r\n\r\n            }\r\n\r\n            // 每张图片加在完成，计数器 -1， 当 count 等于 0 时 (!0 === true), 当所图片加载完成\r\n            // 且没有超时的情况(即没有 timeout 参数时)，清除超时计时器，并触发回调函数。\r\n            if (!--count && isTimeout) {\r\n                clearTimeout(timeoutId);\r\n                callback(success);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 超时函数\r\n     */\r\n    function onTimeout() {\r\n        // 把是否加载超时的标志设置为 true\r\n        isTimeout = true;\r\n        callback(false);\r\n    }\r\n}\r\n\r\nvar __id = 0;\r\nfunction getId() {\r\n    return ++__id;\r\n}\r\n\r\n\r\n// Node.js 的到处模块\r\n// 注: 导出的 loadImage 函数最后都会被 Node.js 封装在 function defineFactory() {} 函数中\r\nmodule.exports = loadImage;\r\n\r\n\r\n\r\n// console.log(!0);","\"use strict\";\r\n\r\n\r\n// 初始化状态\r\nvar STATE_INITIAL = 0;\r\n// 开始状态\r\nvar STATE_START = 1;\r\n// 停止状态\r\nvar STATE_STOP = 2;\r\n\r\n/**\r\n * Timeline 时间轴类\r\n * @constructor\r\n */\r\nfunction Timeline () {\r\n    this.animationHandler = 0;\r\n    this.state = STATE_INITIAL;\r\n}\r\n\r\nTimeline.prototype = {\r\n    constructor: Timeline,\r\n\r\n    /**\r\n     * 时间轴上每一次回调执行的函数\r\n     * @param   time  从动画开始到当前执行的时间 (即程序运行了多久)\r\n     */\r\n    onenterframe: function(time) {\r\n        console.log(\"time: \", time);\r\n    },\r\n\r\n    /**\r\n     * 动画开始\r\n     * @parameter   interval  每一次回调的间隔时间\r\n     */\r\n    start: function(interval) {\r\n        if (this.state === STATE_START) {\r\n            return;\r\n        }\r\n        this.state = STATE_START;\r\n        this.interval = interval || DEFAULT_INTERVAL;\r\n        // +new Date() 相等于调用了 (new Date()).getTime();\r\n        startTimeline(this, +new Date());\r\n    },\r\n\r\n    /**\r\n     * 动画停止\r\n     */\r\n    stop: function() {\r\n        if (this.state !== STATE_START) {\r\n            return;\r\n        }\r\n        this.state = STATE_STOP;\r\n        // 如果动画开始过，则记录动画从开始到现在所经历的时间\r\n        if (this.startTime) {\r\n            // this.dur 为动态给当前 Timeline 对象添加属性，stop方法执行便设置成功\r\n            this.dur = +new Date() - this.startTime;\r\n        }\r\n        cancelAnimationFrame(this.animationHandler);\r\n    },\r\n\r\n    /**\r\n     * 重新开始动画\r\n     */\r\n    restart: function() {\r\n        if (this.state !== STATE_START) {\r\n            return;\r\n        }\r\n        if (!this.dur || !this.interval) {\r\n            return;\r\n        }\r\n        this.state = STATE_START;\r\n\r\n        startTimeline(this, +new Date() - this.dur);\r\n\r\n    },\r\n};\r\n\r\n\r\n/**\r\n * 时间轴动画启动函数\r\n * @param   timeline   时间轴的实例\r\n * @param   startTime  动画开始时间戳\r\n * */\r\nfunction startTimeline(timeline, startTime) {\r\n    // 把开始时间赋值给 Timeline 的自定义属性 startTime\r\n    timeline.startTime = startTime;\r\n    nextTick.interval = timeline.interval;\r\n\r\n    // 记录上一次回调的时间戳\r\n    var lastTick = +new Date();\r\n\r\n    /**\r\n     * 定义每一帧执行的函数\r\n     * */\r\n    function nextTick() {\r\n        var now = +new Date();\r\n\r\n        timeline.animationHandler = requestAnimationFrame(nextTick);\r\n\r\n        // 如果当前时间与上一次回调的时间戳相减大于我们设置的间隔时间，表示可以执行一次回调函数。\r\n        if (now - lastTick >= timeline.interval) {\r\n            timeline.onenterframe(now - startTime);\r\n            lastTick = now;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Timeline;\r\n\r\n\r\nvar  DEFAULT_INTERVAL = 1000 / 60;\r\n\r\n/**\r\n * raf (requestAnimationFrame)\r\n */\r\nvar requestAnimationFrame = (function() {\r\n    return window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.oRequestAnimationFrame ||\r\n        function (callback) {\r\n            return window.setTimeout(callback, callback.interval || DEFAULT_INTERVAL);\r\n        }\r\n})();\r\n/**\r\n * cancel raf\r\n */\r\nvar cancelAnimationFrame = (function() {\r\n    return window.cancelAnimationFrame ||\r\n        window.webkitCancelRequestAnimationFrame ||\r\n        window.mozCancelRequestAnimationFrame ||\r\n        window.oCancelRequestAnimationFrame ||\r\n        function (id) {\r\n            return window.clearTimeout(id);\r\n        }\r\n})();"],"sourceRoot":""}